#pragma once#include <algorithm>
#include <mutex>#include <tinytangle/keypair.h>#include <tinytangle/transaction.h>#include <tinytangle/unit.h>#include <sqlite3pp/sqlite3pp.h>#include <sqlite3pp/sqlite3ppext.h>#include <boost/filesystem.hpp>//#include <sqlite3pp/sqlite3ppext.h>namespace tangle{	class database	{	public:		database() {};		database(const database&) = default;		database(database&&) = default;		database& operator=(database&&) = default;		database& operator=(const database&) = default;		virtual void print();		//virtual void createGenesisUnit();		//建立数据库表项,不创立genesis block		void init();	protected:		const char* db_name_ = "tinytangle.db";	};	class DagDatabase : public database	{	public:		DagDatabase();		DagDatabase(const DagDatabase&) = default;		DagDatabase(DagDatabase&&) = default;		DagDatabase& operator=(DagDatabase&&) = default;		DagDatabase& operator=(const DagDatabase&) = default;				void print() {};		//void test();
		//根据timestamp获取最新UnitHash
		bool getLastUnit(int64_t& timestamp, sha256_t& hash);		uint64_t getCount();

		void getAllUnit(Json::Value& root) ;
		void pushAllUnit(const Json::Value& root);		bool push(const Unit& newUnit);		uint64_t getWeight();		bool getUnit(const sha256_t& hash, Unit& dest);		void createGenesisUnit();		virtual ~DagDatabase() {			db_conn_.disconnect();		}	private:		//创建一个专属database,并连接		void updateWeright(const std::string &);		void check_weight(const std::string &);	private:		std::mutex update_weight_mtx_;		sqlite3pp::database db_conn_{ db_name_ };	};	// 相当于是本地钱包的私钥管理	class KeyPairDatabase :public database	{	public:		KeyPairDatabase() {};		KeyPairDatabase(const KeyPairDatabase&) = default;		KeyPairDatabase(KeyPairDatabase&&) = default;		KeyPairDatabase& operator=(KeyPairDatabase&&) = default;		KeyPairDatabase& operator=(const KeyPairDatabase&) = default;		KeyPair getNewKeyPair();		KeyPair getKeyPair() {			if (getCount() == 0)				return getNewKeyPair();
			sqlite3pp::query qry(db_conn_, "SELECT * FROM key_pairs");
			auto i = qry.begin();
			auto priKeyBase64 = (*i).get<std::string>(1); //address private_key account			return KeyPair(priKeyBase64);		}		//bool listKeys(Json::Value& root);		//bool push(key_pair& new_jey_pair);		bool getBalance(const address_t& encodePubKey, value& balance);		bool updAccount(const Transaction& tx);		int getCount() {
			sqlite3pp::query qry(db_conn_, "SELECT count(*) FROM key_pairs");			auto i = qry.begin();			uint64_t count = (*i).get<long long int>(0);			return count;		}	private:		//入账		bool income(const std::string encodePubKey, const value v);		//支出		bool expenses(const std::string encodePubKey, const value v);	private:		sqlite3pp::database db_conn_{ db_name_ };	};}